(match
  (w{mono} leaf)
  (ite
    (w{mono} node)
    (ite
      (match
        (w{mono} (let:tree:cf leaf (w{mono} node)))
        (ite
          (w{mono} (let:tree:cf node (w{mono} node)))
          (ite
            (match
              (w{mono} (let:tree:cf leaf (let:tree:cf node (w{mono} node))))
              (w{l2xy mono}
                (let:tree:cf
                  (tick:defer (shift app))
                  (match
                    (w{mono}
                      leaf
                    )
                    (w{l2xy mono}
                      (let:tree:cf
                        node
                        (let:tree:cf
                          node
                          (w{mono}
                            node
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
            (match
              (w{mono} (let:tree:cf leaf (let:tree:cf node (w{mono} node))))
              (w{l2xy mono}
                (let:tree:cf
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy mono} (let:tree:cf node (let:tree:cf node (w{mono} node))))
                  )
                )
              )
            )
          )
        )
      )
      (match
        (w{mono} (let:tree:cf leaf (w{mono} node)))
        (ite
          (w{mono} (let:tree:cf node (w{mono} node)))
          (ite
            (match
              (w{mono} (let:tree:cf leaf (let:tree:cf node (w{mono} node))))
              (w{l2xy mono}
                (let:tree:cf
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy mono} (let:tree:cf node (let:tree:cf node (w{mono} node))))
                  )
                )
              )
            )
            (match
              (w{mono} (let:tree:cf node (let:tree:cf leaf (w{mono} node))))
              (w{l2xy mono}
                (let:tree:cf
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy mono} (let:tree:cf node (let:tree:cf node (w{mono} node))))
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
