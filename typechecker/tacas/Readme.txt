# Artifact

## Contents of `artifact`

## `bin`

Scripts to execute the artifact. The script
`bin/artifact.sh` is a wrapper around
`bin/typechecker`. It sets environment variables
such as `$JAVA_HOME` and `$LD_LIBRARY_PATH` such
that the OpenJDK and Z3 bundled with the artifact
are used.
`bin/typechecker` itself was generated by the
Gradle build system and wraps around the Java
runtime. Usage of `bin/artifact.sh` is explained
below.

### `lib`

Contains dependency JARs.
See also
https://en.wikipedia.org/wiki/JAR_(file_format)

### `java`

Contains OpenJDK 14. See also
https://openjdk.java.net/projects/jdk/14/

### `z3`

Contains Z3 built as a shared library
(`libz3java.so`) for interoperability with Java.
See also
https://github.com/Z3Prover/z3/wiki#background

## `resources`

Contains source code of the function definitions
to be analyzed (`*.ml` files) as well as tactics
for guided proof (`*.txt` files, this feature is
currently not exposed via `bin/artifact.sh`).

Contains grammars of the input languages for
reference.

## Runtime and Dependencies

This artifact is implemented in Java 14. It
depends on multiple libraries packaged as JAR
files and Z3 for SMT solving provided as a shared
object which is dynamically linked at runtime.

## Invoking the Artifact

In a Bash-compatible shell, run

    cd artifact

to change into the artifact directory. Then run

    ./bin/artifact.sh --help

To get a help text. To verify the results in the
accompanying paper, you will need the "run"
subcommand

    ./bin/artifact.sh run --help

For example, to check the type annotation of the
function definition `PairingHeap.link`, run

    ./bin/artifact.sh run --home=resources/examples 'PairingHeap.link'

Note that the `--home` parameter corresponds to
the module search directory, so the module
`PairingHeap` corresponds to the file

    resources/examples/PairingHeap.ml

Note that the last positional parameter in the
previous invocation is a regular expression. This
way multiple functions can be checked together,
even if their definitions do not depend on each
other. An extreme, unrealistic invocation is


    ./bin/artifact.sh run --home=resources/examples '.*'

To infer its type with coefficients defined over
the rational numbers, run

    ./bin/artifact.sh run --home=resources/examples --infer --rational 'PairingHeap.link'

To check a specific type, you will have to edit
the annotation in the corresponding `*.ml` file.


    ./bin/artifact.sh lnf --home=resources/examples --out=mydir

Will print function definitions in let-normal-form
to the directory passed as `out` argument. This
directory must exist and be writable.

# Results reported in the TACAS tool paper

The artifact is consistent with the results reported in the TACAS tool paper
(see Fig. 8 on page 16), submitted on 2020-10-23. These results differ slightly
from the results in the paper submitted on 2020-10-16, since we fixed a bug and
added two additional benchmark (`SplayTree.splay_max_eq`, and
`PairingHeap.insert`).

## Resource Limits

The artifact imposes following resource limits:

  Wall clock runtime: 15 minutes
  Limit for Z3 memory: 24GiB

All results were computed on a machine with 32GiB
main memory, and computations took on the order of
less than a second up to fifteen minutes.

## Archiving

The authors will not take extra steps to archive
the artifact. Its source code is freely available
at

    https://github.com/lorenzleutgeb/lac
