(match (* t *)
  leaf
  (ite (* a == c *)
    node
    (ite (* a < c *)
      (match (* cl, zig *)
        (let:tree:cf leaf node _ _ _)
          (ite (* a == b *)
            (let:tree:cf node node _ _ _)
            (ite (* a < b *)
              (ite (* bl == leaf, zig zig *)
                (let:tree:cf node node _ _ _)
                (let:tree:cf
                  app (* splay_eq a bl *)
                  (match
                    leaf
                    (let:tree:cf
                      node
                      Q6@(let:tree:cf
                        node
                        Q7@(node)
                        node (* (b d e) = ({al -> 1} 0 2) *)
                        node (* (b d e) = ({al -> 1} 1 0) *)
                        node (* (b d e) = ({al -> 1} 1 2) *)
                      )
                      node
                      node
                      node
                      node
                      node
                      node
                      node
                      node
                      node
                    )
                  )
                  app
                  app
                  app
                  app
                  app
                  app
                  app
                  app
                  app
                )
              )
              ? (* zig zag *)
            )
        )
      )
      ? (* zag *)
    )
  )
)