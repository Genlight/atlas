(* Given a cf-signature fixed to
 *
 *   { [1·p₍₁ ₀₎] -> [1·p₍₁ ₀₎], 0 -> 0 }
 *
 * this proof yields a result of
 *
 *   [1·p₀ + 1·p₍₁ ₀₎] -> 0
 *
 * Notes on syntax:
 *   _                   means "apply rules syntax-directed"
 *   _{w}   additionally means "apply (w) before leaves"
 *   _{cf}  additionally means "apply (let:tree:cf) instead of (let:tree)"
 *
 *)
(match (* t *)
  (w _)
  (ite (* a == c *)
    (w _)
    (ite (* a < c *)
      (match (* cl *)
        (w _)
        (* NOTE: In the proof in the paper, we did apply (w) here,
         * around the following (ite). We do not do this here.
         *)
        (ite (* a == b *)
          _{w,cf}
          (ite (* a < b *)
            (ite (* bl == leaf *)
              (w _)
              (* NOTE: Instead, we apply (w) here. *)
              (w
                (let:tree:cf
                  _
                  (match
                    _
                    (let:tree:cf
                      _
                      _
                      _
                      _
                      _
                    )
                  )
                  _
                  _
                  _
                )
              )
            )
              (ite (* br == leaf *)
                _{w,cf}
                (w
                  (let:tree:cf
                    _
                    (match
                      _
                      (let:tree:cf
                        _
                        (w
                          _
                        )
                        _
                        _
                        _
                      )
                    )
                    _
                    _
                    _
                  )
                )
              )
            )
          )
      )
      (match (* cr *)
        _{w}
        (ite (* a == b *)
          _{w,cf}
          (ite (* a < b *)
            (ite (* bl == leaf *)
              _{w,cf}
              (w
                (let:tree:cf
                  _
                  (match
                    _
                    (let:tree:cf
                      _
                      (w
                        _
                      )
                      _
                      _
                      _
                    )
                  )
                  _
                  _
                  _
                )
              )
            )
            (ite (* br == leaf *)
              _{w,cf}
              (w
                (let:tree:cf
                  _
                  (match
                    _
                    (let:tree:cf
                      _
                      _
                      _
                      _
                      _
                    )
                  )
                  _
                  _
                  _
                )
              )
            )
          )
        )
      )
    )
  )
)
